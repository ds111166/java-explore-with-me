{
	"info": {
		"_postman_id": "2e9d870f-99ff-40fc-8845-7ecfebeb6c25",
		"name": "Test Explore With Me - feature comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28881659"
	},
	"item": [
		{
			"name": "Comments",
			"item": [
				{
					"name": "Add new comment no body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.be.badRequest;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment with a non-existent user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        comment = rnd.getComment();",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.be.notFound;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "9999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment with a non-existent event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        comment = rnd.getComment();",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.be.notFound;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?eventId=8888888",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "8888888"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment with a text field > 2048 in length",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        comment = rnd.getComment();",
									"        comment.text = rnd.getWord(3050);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.have.status(400);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        pm.collectionVariables.set(\"response\", event)",
									"        comment = rnd.getComment();",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find for the current user's comment by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"eid\", event.id);",
									"        pm.collectionVariables.set(\"commid\", comment.id);",
									"        pm.environment.set(\"sour\", comment);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.environment.get(\"sour\");",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, author, createdOn, editedOn, text, state\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('eventId');",
									"pm.expect(target).to.have.property('author');",
									"pm.expect(target).to.have.property('createdOn');",
									"pm.expect(target).to.have.property('editedOn');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('state');",
									"});",
									"",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(source.id).equal(target.id, 'Идентификатор комментария должен соответствовать идентификатору в запросе');",
									"    pm.expect(source.eventId).equal(target.eventId, 'eventId в ответе должно соответствовать eventId в запросе');",
									"    pm.expect(source.author.id).equal(target.author.id, 'author.id в ответе должно соответствовать author.id в запросе');",
									"    pm.expect(source.author.name).equal(target.author.name, 'author.name в ответе должно соответствовать author.name в запросе');",
									"    pm.expect(source.createdOn).equal(target.createdOn, 'createdOn в ответе должно соответствовать createdOn в запросе');",
									"    pm.expect(source.editedOn).equal(target.editedOn, 'editedOn в ответе должно соответствовать editedOn в запросе');",
									"    pm.expect(source.text).equal(target.text, 'text в ответе должно соответствовать text в запросе');",
									"    pm.expect(source.state).equal(target.state, 'state в ответе должно соответствовать state в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find public comment by ID public event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id);",
									"        ",
									"        await api.addComment(user.id, event.id, rnd.getComment());",
									"        await api.addComment(user1.id, event.id, rnd.getComment());",
									"        await api.addComment(user2.id, event.id, rnd.getComment());",
									"        await api.addComment(user3.id, event.id, rnd.getComment());",
									"",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"",
									"pm.test(\"Должно быть найдено 4 коментария по заданному фильтру\", function () {",
									"    pm.expect(target).is.an('array');",
									"    pm.expect(target.length).to.eql(4);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments/event/:eventid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"event",
								":eventid"
							],
							"variable": [
								{
									"key": "eventid",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find public comment by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id);",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment.id);",
									"        pm.environment.set(\"sour\", comment);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.environment.get(\"sour\");",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, author, createdOn, editedOn, text, state\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('eventId');",
									"pm.expect(target).to.have.property('author');",
									"pm.expect(target).to.have.property('createdOn');",
									"pm.expect(target).to.have.property('editedOn');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('state');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(source.id).equal(target.id, 'Идентификатор комментария должен соответствовать идентификатору в запросе');",
									"    pm.expect(source.eventId).equal(target.eventId, 'eventId в ответе должно соответствовать eventId в запросе');",
									"    pm.expect(source.author.id).equal(target.author.id, 'author.id в ответе должно соответствовать author.id в запросе');",
									"    pm.expect(source.author.name).equal(target.author.name, 'author.name в ответе должно соответствовать author.name в запросе');",
									"    pm.expect(source.createdOn).equal(target.createdOn, 'createdOn в ответе должно соответствовать createdOn в запросе');",
									"    pm.expect(source.editedOn).equal(target.editedOn, 'editedOn в ответе должно соответствовать editedOn в запросе');",
									"    pm.expect(source.text).equal(target.text, 'text в ответе должно соответствовать text в запросе');",
									"    pm.expect(source.state).equal(target.state, 'state в ответе должно соответствовать state в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Administrator find a comment by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id);",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment.id);",
									"        pm.environment.set(\"sour\", comment);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.environment.get(\"sour\");",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, author, createdOn, editedOn, text, state\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('eventId');",
									"pm.expect(target).to.have.property('author');",
									"pm.expect(target).to.have.property('createdOn');",
									"pm.expect(target).to.have.property('editedOn');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('state');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(source.id).equal(target.id, 'Идентификатор комментария должен соответствовать идентификатору в запросе');",
									"    pm.expect(source.eventId).equal(target.eventId, 'eventId в ответе должно соответствовать eventId в запросе');",
									"    pm.expect(source.author.id).equal(target.author.id, 'author.id в ответе должно соответствовать author.id в запросе');",
									"    pm.expect(source.author.name).equal(target.author.name, 'author.name в ответе должно соответствовать author.name в запросе');",
									"    pm.expect(source.createdOn).equal(target.createdOn, 'createdOn в ответе должно соответствовать createdOn в запросе');",
									"    pm.expect(source.editedOn).equal(target.editedOn, 'editedOn в ответе должно соответствовать editedOn в запросе');",
									"    pm.expect(source.text).equal(target.text, 'text в ответе должно соответствовать text в запросе');",
									"    pm.expect(source.state).equal(target.state, 'state в ответе должно соответствовать state в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Receiving comments with filtering",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        const user4 = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));",
									"        let event2 = await api.addEvent(user1.id, rnd.getEvent(category.id));",
									"        let event3 = await api.addEvent(user2.id, rnd.getEvent(category.id));",
									"        event1 = await api.publishEvent(event1.id);",
									"        event2 = await api.publishEvent(event2.id);",
									"        event3 = await api.publishEvent(event3.id);",
									"        comment11 = await api.addComment(user1.id, event1.id, rnd.getComment());",
									"        comment21 = await api.addComment(user2.id, event1.id, rnd.getComment());",
									"        comment31 = await api.addComment(user3.id, event1.id, rnd.getComment());",
									"        comment41 = await api.addComment(user4.id, event1.id, rnd.getComment());",
									"        comment22 = await api.addComment(user2.id, event2.id, rnd.getComment());",
									"        comment42 = await api.addComment(user4.id, event2.id, rnd.getComment());",
									"        let commentIds = [String(comment11.id), String(comment21.id), String(comment31.id), String(comment41.id)];",
									"        pm.environment.set(\"commentIds\", commentIds);",
									"        pm.request.removeQueryParams(['users', 'states', 'events']);",
									"        pm.request.addQueryParams(['events=' + event1.id, 'states=' + 'PUBLISHED']);",
									"        pm.environment.set(\"sour\", comment11)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.environment.get(\"sour\");",
									"const result = pm.response.json()[0];",
									"const results = pm.response.json();",
									"const commentIds = pm.environment.get(\"commentIds\");",
									"",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, author, createdOn, editedOn, text, state\", function () {",
									"pm.expect(result).to.have.property('id');",
									"pm.expect(result).to.have.property('eventId');",
									"pm.expect(result).to.have.property('author');",
									"pm.expect(result).to.have.property('createdOn');",
									"pm.expect(result).to.have.property('editedOn');",
									"pm.expect(result).to.have.property('text');",
									"pm.expect(result).to.have.property('state');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(results).is.an('array');",
									"    pm.expect(results.length).to.eql(4);",
									"    pm.expect(String(results[0].id)).equal(String(commentIds[0]));",
									"    pm.expect(String(results[1].id)).equal(String(commentIds[1]));",
									"    pm.expect(String(results[2].id)).equal(String(commentIds[2]));",
									"    pm.expect(String(results[3].id)).equal(String(commentIds[3]));",
									"    pm.expect(source.id).equal(result.id, 'Идентификатор комментария должен соответствовать идентификатору в запросе');",
									"    pm.expect(source.eventId).equal(result.eventId, 'eventId в ответе должно соответствовать eventId в запросе');",
									"    pm.expect(source.author.id).equal(result.author.id, 'author.id в ответе должно соответствовать author.id в запросе');",
									"    pm.expect(source.author.name).equal(result.author.name, 'author.name в ответе должно соответствовать author.name в запросе');",
									"    pm.expect(source.createdOn).equal(result.createdOn, 'createdOn в ответе должно соответствовать createdOn в запросе');",
									"    pm.expect(source.editedOn).equal(result.editedOn, 'editedOn в ответе должно соответствовать editedOn в запросе');",
									"    pm.expect(source.text).equal(result.text, 'text в ответе должно соответствовать text в запросе');",
									"    pm.expect(source.state).equal(result.state, 'state в ответе должно соответствовать state в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/?users=0&events=0&states=PUBLISHED&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&size=10&from=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								""
							],
							"query": [
								{
									"key": "users",
									"value": "0"
								},
								{
									"key": "events",
									"value": "0"
								},
								{
									"key": "states",
									"value": "PUBLISHED"
								},
								{
									"key": "rangeStart",
									"value": "2022-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2097-09-06%2013%3A30%3A38"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "from",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Receiving comments with incorrect filtering",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        const user4 = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));",
									"        let event2 = await api.addEvent(user1.id, rnd.getEvent(category.id));",
									"        let event3 = await api.addEvent(user2.id, rnd.getEvent(category.id));",
									"        event1 = await api.publishEvent(event1.id);",
									"        event2 = await api.publishEvent(event2.id);",
									"        event3 = await api.publishEvent(event3.id);",
									"        comment11 = await api.addComment(user1.id, event1.id, rnd.getComment());",
									"        comment21 = await api.addComment(user2.id, event1.id, rnd.getComment());",
									"        comment31 = await api.addComment(user3.id, event1.id, rnd.getComment());",
									"        comment41 = await api.addComment(user4.id, event1.id, rnd.getComment());",
									"        comment22 = await api.addComment(user2.id, event2.id, rnd.getComment());",
									"        comment42 = await api.addComment(user4.id, event2.id, rnd.getComment());",
									"        let commentIds = [String(comment11.id), String(comment21.id), String(comment31.id), String(comment41.id)];",
									"        pm.environment.set(\"commentIds\", commentIds);",
									"        pm.request.removeQueryParams(['users', 'states', 'events']);",
									"        pm.request.addQueryParams(['events=' + event1.id, 'states=' + 'PUBLISHED']);",
									"        pm.environment.set(\"sour\", comment11)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.have.status(400);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/?users=0&events=0&states=PUBLISHED&rangeStart=2029-01-06%2013%3A30%3A38&rangeEnd=2008-09-06%2013%3A30%3A38&size=10&from=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								""
							],
							"query": [
								{
									"key": "users",
									"value": "0"
								},
								{
									"key": "events",
									"value": "0"
								},
								{
									"key": "states",
									"value": "PUBLISHED"
								},
								{
									"key": "rangeStart",
									"value": "2029-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2008-09-06%2013%3A30%3A38"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "from",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Administrator is trying to get a comment on an invalid ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id);",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "commid",
									"value": "10101010101"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current user is editing his comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        updatedComment = rnd.getComment();",
									"        updatedComment.text = 'update text';",
									"        pm.collectionVariables.set(\"commid\", comment.id)",
									"        pm.environment.set(\"sour\", comment);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(updatedComment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.environment.get(\"sour\");",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, author, createdOn, editedOn, text, state\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('eventId');",
									"pm.expect(target).to.have.property('author');",
									"pm.expect(target).to.have.property('createdOn');",
									"pm.expect(target).to.have.property('editedOn');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('state');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(source.id).equal(target.id, 'Идентификатор комментария должен соответствовать идентификатору в запросе');",
									"    pm.expect(source.eventId).equal(target.eventId, 'eventId в ответе должно соответствовать eventId в запросе');",
									"    pm.expect(source.author.id).equal(target.author.id, 'author.id в ответе должно соответствовать author.id в запросе');",
									"    pm.expect(source.author.name).equal(target.author.name, 'author.name в ответе должно соответствовать author.name в запросе');",
									"    pm.expect(source.createdOn).equal(target.createdOn, 'createdOn в ответе должно соответствовать createdOn в запросе');",
									"    pm.expect(target.editedOn).to.not.be.null;",
									"    pm.expect(target.text).equal('update text', 'text в ответе должно быть равно \"update text\"');",
									"    pm.expect(source.state).equal(target.state, 'state в ответе должно соответствовать state в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current user is editing another user's comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user1.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment.id)",
									"        updatedComment = rnd.getComment();",
									"        updatedComment.text = 'update text';",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(updatedComment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {",
									"    pm.response.to.have.status(403);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current user is editing a comment with incorrect ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user1.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment.id)",
									"        updatedComment = rnd.getComment();",
									"        updatedComment.text = 'update text';",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(updatedComment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commid",
									"value": "56898232232"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin is editing a comment with incorrect ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user1.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment.id)",
									"        updatedComment = rnd.getComment();",
									"        updatedComment.text = 'update text';",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(updatedComment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "commid",
									"value": "232323232232"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin is processing a comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user1.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment.id)",
									"        pm.environment.set(\"sour\", comment);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"    ",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"const source = pm.environment.get(\"sour\");",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, author, createdOn, editedOn, text, state\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('eventId');",
									"pm.expect(target).to.have.property('author');",
									"pm.expect(target).to.have.property('createdOn');",
									"pm.expect(target).to.have.property('editedOn');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('state');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(source.id).equal(target.id, 'Идентификатор комментария должен соответствовать идентификатору в запросе');",
									"    pm.expect(source.eventId).equal(target.eventId, 'eventId в ответе должно соответствовать eventId в запросе');",
									"    pm.expect(source.author.id).equal(target.author.id, 'author.id в ответе должно соответствовать author.id в запросе');",
									"    pm.expect(source.author.name).equal(target.author.name, 'author.name в ответе должно соответствовать author.name в запросе');",
									"    pm.expect(source.createdOn).equal(target.createdOn, 'createdOn в ответе должно соответствовать createdOn в запросе');",
									"    pm.expect(source.editedOn).equal(target.editedOn, 'editedOn в ответе должно соответствовать editedOn в запросе');",
									"    pm.expect(source.text).equal(target.text, 'text в ответе должно быть равно \"update text\"');",
									"    pm.expect(target.state).equal( 'PENDING', 'state в ответе должно соответствовать  \"PENDING\"');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commid?action=pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commid"
							],
							"query": [
								{
									"key": "action",
									"value": "pending"
								}
							],
							"variable": [
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin is processing a comment with invalid action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user1.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"response\", comment)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"   ",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.have.status(400);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commid?action=cancell",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commid"
							],
							"query": [
								{
									"key": "action",
									"value": "cancell"
								}
							],
							"variable": [
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting your comment by the current user by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"eid\", event.id);",
									"        pm.collectionVariables.set(\"commid\", comment.id);",
									"        pm.environment.set(\"sour\", comment);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);    ",
									"});",
									"",
									"const source = pm.environment.get(\"sour\");",
									"const commId = pm.collectionVariables.get(\"commid\");",
									"const baseUrl = pm.collectionVariables.get('baseUrl');",
									"",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){",
									"    pm.expect(String(source.id)).to.eql(String(commId));;",
									"});",
									"",
									"let body",
									"const req = {",
									"                url: baseUrl + \"/admin/comments/\" + commId,",
									"                method: \"GET\",",
									"                body: body == null ? \"\" : JSON.stringify(body),",
									"                header: { \"Content-Type\": \"application/json\" },",
									"            };",
									"pm.sendRequest(req, (err, res) => {",
									"    const resJson = res.json();",
									"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){",
									"        pm.expect(res.code).to.eql(404);",
									"        pm.expect(resJson).to.not.have.property('id');",
									"        pm.expect(resJson).to.not.have.property('eventId');",
									"        pm.expect(resJson).to.not.have.property('author');",
									"        pm.expect(resJson).to.not.have.property('createdOn');",
									"        pm.expect(resJson).to.not.have.property('text');",
									"    });",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting a comment by the administrator by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment.id);",
									"        pm.environment.set(\"sour\", comment);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);    ",
									"});",
									"",
									"const source = pm.environment.get(\"sour\");",
									"const commId = pm.collectionVariables.get(\"commid\");",
									"const baseUrl = pm.collectionVariables.get('baseUrl');",
									"",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){",
									"    pm.expect(String(source.id)).to.eql(String(commId));",
									"});",
									"",
									"let body",
									"const req = {",
									"                url: baseUrl + \"/admin/comments/\" + commId,",
									"                method: \"GET\",",
									"                body: body == null ? \"\" : JSON.stringify(body),",
									"                header: { \"Content-Type\": \"application/json\" },",
									"            };",
									"pm.sendRequest(req, (err, res) => {",
									"    const resJson = res.json();",
									"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){",
									"        pm.expect(res.code).to.eql(404);",
									"        pm.expect(resJson).to.not.have.property('id');",
									"        pm.expect(resJson).to.not.have.property('eventId');",
									"        pm.expect(resJson).to.not.have.property('author');",
									"        pm.expect(resJson).to.not.have.property('createdOn');",
									"        pm.expect(resJson).to.not.have.property('text');",
									"    });",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Administrator's deletion of a comment with an invalid ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "commid",
									"value": "222222222222"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting another user's comment by the current user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user1.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment.id);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commid"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commid",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Claims",
			"item": [
				{
					"name": "Add new claim",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment1 = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment1.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/claims?commentId={{commid}}&cause=SPAM",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"claims"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{commid}}"
								},
								{
									"key": "cause",
									"value": "SPAM"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a claim with invalid cause",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment1 = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment1.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.have.status(400);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/claims?commentId={{commid}}&cause=ахинея",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"claims"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{commid}}"
								},
								{
									"key": "cause",
									"value": "ахинея"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a claim with an incorrect comment ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment1 = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment1.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/claims?commentId=89632&cause=SPAM",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"claims"
							],
							"query": [
								{
									"key": "commentId",
									"value": "89632"
								},
								{
									"key": "cause",
									"value": "SPAM"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a claim with an incorrect user ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment1 = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"commid\", comment1.id)",
									"        let comment2 = await api.addComment(user2.id, event.id, rnd.getComment());",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/claims?commentId={{commid}}&cause=SPAM",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"claims"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{commid}}"
								},
								{
									"key": "cause",
									"value": "SPAM"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "59995555"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find claim by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment1 = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        claim = await api.addClaim(user.id, comment1.id,  'spam');",
									"        pm.collectionVariables.set(\"claimid\", claim.id);",
									"        pm.environment.set(\"sour\", claim);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.environment.get(\"sour\");",
									"const result = pm.response.json();",
									"",
									"pm.test(\"Претензия должна содержать поля: id, authorId, comment, createdOn, cause\", function () {",
									"pm.expect(result).to.have.property('id');",
									"pm.expect(result).to.have.property('authorId');",
									"pm.expect(result).to.have.property('comment');",
									"pm.expect(result).to.have.property('createdOn');",
									"pm.expect(result).to.have.property('cause');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(source.id).equal(result.id, 'Идентификатор комментария должен соответствовать идентификатору в запросе');",
									"    pm.expect(source.authorId).equal(result.authorId, 'authorId в ответе должно соответствовать authorId в запросе');",
									"    pm.expect(source.comment.id).equal(result.comment.id, 'comment.id в ответе должно соответствовать comment.id в запросе');",
									"    pm.expect(source.createdOn).equal(result.createdOn, 'createdOn в ответе должно соответствовать createdOn в запросе');",
									"    pm.expect(source.cause).equal(result.cause, 'cause в ответе должно соответствовать cause в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/claims/:claimid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"claims",
								":claimid"
							],
							"variable": [
								{
									"key": "claimid",
									"value": "{{claimid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find a claim for an incorrect ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment1 = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        claim = await api.addClaim(user.id, comment1.id,  'spam');",
									"        pm.collectionVariables.set(\"claimid\", claim.id);",
									"        pm.environment.set(\"sour\", claim);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/claims/:claimid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"claims",
								":claimid"
							],
							"variable": [
								{
									"key": "claimid",
									"value": "1000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find claims with filtering",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment1 = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        claim = await api.addClaim(user.id, comment1.id,  'fake');",
									"        claim2 = await api.addClaim(user2.id, comment1.id,  'content');",
									"        claim3 = await api.addClaim(user3.id, comment1.id,  'BEHAVIOR');",
									"        let claimIds = [String(claim.id), String(claim2.id), String(claim3.id)];",
									"        pm.environment.set(\"claimIds\", claimIds);",
									"        pm.request.removeQueryParams(['users', 'causes', 'comments']);",
									"        pm.request.addQueryParams(['comments=' + comment1.id, 'causes=' + 'fake', , 'causes=' + 'content']);",
									"        pm.environment.set(\"sour\", claim);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.environment.get(\"sour\");",
									"const result = pm.response.json()[0];",
									"const results = pm.response.json();",
									"const claimIds = pm.environment.get(\"claimIds\");",
									"",
									"pm.test(\"Претензия должна содержать поля: id, authorId, comment, createdOn, cause\", function () {",
									"pm.expect(result).to.have.property('id');",
									"pm.expect(result).to.have.property('authorId');",
									"pm.expect(result).to.have.property('comment');",
									"pm.expect(result).to.have.property('createdOn');",
									"pm.expect(result).to.have.property('cause');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(results).is.an('array');",
									"    pm.expect(results.length).to.eql(2);",
									"    pm.expect(String(results[0].id)).equal(String(claimIds[0]));",
									"    pm.expect(String(results[1].id)).equal(String(claimIds[1]));",
									"    pm.expect(source.id).equal(result.id, 'Идентификатор комментария должен соответствовать идентификатору в запросе');",
									"    pm.expect(source.authorId).equal(result.authorId, 'authorId в ответе должно соответствовать authorId в запросе');",
									"    pm.expect(source.comment.id).equal(result.comment.id, 'comment.id в ответе должно соответствовать comment.id в запросе');",
									"    pm.expect(source.createdOn).equal(result.createdOn, 'createdOn в ответе должно соответствовать createdOn в запросе');",
									"    pm.expect(source.cause).equal(result.cause, 'cause в ответе должно соответствовать cause в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/claims/?users=0&comments=0&causes=spam&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&size=10&from=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"claims",
								""
							],
							"query": [
								{
									"key": "users",
									"value": "0"
								},
								{
									"key": "comments",
									"value": "0"
								},
								{
									"key": "causes",
									"value": "spam"
								},
								{
									"key": "rangeStart",
									"value": "2022-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2097-09-06%2013%3A30%3A38"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "from",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find claims with incorrect filtering",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment1 = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        claim = await api.addClaim(user.id, comment1.id,  'fake');",
									"        claim2 = await api.addClaim(user2.id, comment1.id,  'content');",
									"        claim3 = await api.addClaim(user3.id, comment1.id,  'BEHAVIOR');",
									"        let claimIds = [String(claim.id), String(claim2.id), String(claim3.id)];",
									"        pm.environment.set(\"claimIds\", claimIds);",
									"        pm.request.removeQueryParams(['users', 'causes', 'comments']);",
									"        pm.request.addQueryParams(['comments=' + comment1.id, 'causes=' + 'fake', , 'causes=' + 'content']);",
									"        pm.environment.set(\"sour\", claim);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.have.status(400);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/claims/?users=0&comments=0&causes=spam&rangeStart=2098-01-06%2013%3A30%3A38&rangeEnd=2023-09-06%2013%3A30%3A38&size=10&from=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"claims",
								""
							],
							"query": [
								{
									"key": "users",
									"value": "0"
								},
								{
									"key": "comments",
									"value": "0"
								},
								{
									"key": "causes",
									"value": "spam"
								},
								{
									"key": "rangeStart",
									"value": "2098-01-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2023-09-06%2013%3A30%3A38"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "from",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete claim by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        claim = await api.addClaim(user.id, comment.id, 'spam');",
									"        pm.collectionVariables.set(\"claimid\", claim.id);",
									"        pm.environment.set(\"sour\", claim);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);    ",
									"});",
									"",
									"const source = pm.environment.get('sour');",
									"const claimId = pm.collectionVariables.get('claimid');",
									"const baseUrl = pm.collectionVariables.get('baseUrl')",
									"",
									"pm.test(\"Претензия должна быть найдена до выполнения запроса\", function(){",
									"    pm.expect(String(source.id)).to.eql(String(claimId));",
									"});",
									"",
									"let body",
									"const req = {",
									"                url: baseUrl + \"/admin/claims/\" + claimId,",
									"                method: \"GET\",",
									"                body: body == null ? \"\" : JSON.stringify(body),",
									"                header: { \"Content-Type\": \"application/json\" },",
									"            };",
									"pm.sendRequest(req, (err, res) => {",
									"    const resJson = res.json();",
									"    pm.test(\"Претензия должна быть удалена после выполнения запроса\", function(){",
									"        pm.expect(res.code).to.eql(404);",
									"        pm.expect(resJson).to.not.have.property('id');",
									"        pm.expect(resJson).to.not.have.property('authorId');",
									"        pm.expect(resJson).to.not.have.property('comment');",
									"        pm.expect(resJson).to.not.have.property('createdOn');",
									"        pm.expect(resJson).to.not.have.property('cause');",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/claims/:claimid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"claims",
								":claimid"
							],
							"variable": [
								{
									"key": "claimid",
									"value": "{{claimid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a claim for an incorrect ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        let comment = await api.addComment(user1.id, event.id, rnd.getComment());",
									"        claim = await api.addClaim(user.id, comment.id, 'spam');",
									"        pm.collectionVariables.set(\"claimid\", claim.id);",
									"        pm.environment.set(\"sour\", claim);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.have.status(404);    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/claims/:claimid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"claims",
								":claimid"
							],
							"variable": [
								{
									"key": "claimid",
									"value": "12022100"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post('/users/' + userId + '/comments?eventId='+eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"    async findCommentByAdmin(commentId, verbose=null) {",
					"        return this.get('/admin/comments/' + commentId, null, \"Ошибка админа при поиске комментария по id\", verbose);",
					"    }",
					"    async findCommentByUser(userId, commentId, verbose=null) {",
					"        return this.get('/users/'+userId+'/comments/' + commentId, null, \"Ошибка пользователя при поиске комментария по id\", verbose);",
					"    }",
					"    async deleteCommentByUser(userId, commentId, verbose=null) {",
					"        return this.delete('/users/'+userId+'/comments/' + commentId, null, \"Ошибка пользователя при удалении комментария по id\", verbose);",
					"    }",
					"    async deleteCommentByAdmin(commentId, verbose=null) {",
					"        return this.delete('/admin/comments/' + commentId, null, \"Ошибка админа при удалении комментария по id\", verbose);",
					"    }",
					"    ",
					"    async addClaim(userId, commentId,  cause, verbose=null) {",
					"        return this.post('/users/' + userId + '/claims?commentId=' + commentId+'&cause='+cause, null, \"Ошибка при добавлении новой претензии: \", verbose);",
					"    }",
					"    async findClaim(claimId, verbose=null) {",
					"        return this.get('/admin/claims/' + claimId, null, \"Ошибка при поиске претензии по id\", verbose);",
					"    }",
					"    async deleteClaim(claimId, verbose=null) {",
					"        return this.delete('/admin/claims/' + claimId, null, \"Ошибка при при удалении претензии по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async delete(path, body = null, errorText = \"Ошибка при выполнении delete-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"DELETE\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(1, 2048)",
					"        };",
					"    }",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "0",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "0",
			"type": "string"
		},
		{
			"key": "commid",
			"value": "0",
			"type": "string"
		},
		{
			"key": "claimid",
			"value": "0",
			"type": "string"
		},
		{
			"key": "uid1",
			"value": "0",
			"type": "string"
		},
		{
			"key": "uid2",
			"value": "0",
			"type": "string"
		},
		{
			"key": "uid3",
			"value": "0",
			"type": "string"
		},
		{
			"key": "eid1",
			"value": "0",
			"type": "string"
		},
		{
			"key": "eid2",
			"value": "0",
			"type": "string"
		},
		{
			"key": "eid3",
			"value": "0",
			"type": "string"
		},
		{
			"key": "response",
			"value": "[object Object]",
			"type": "string"
		}
	]
}